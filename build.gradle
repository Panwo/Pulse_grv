buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.owasp:dependency-check-gradle:6.2.2'
    }
}

allprojects {
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'java'

    defaultTasks 'clean', 'test'
    group 'com.vdp.pulse'
    version '1.0-SNAPSHOT'
    sourceCompatibility = 1.11
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = "UTF-8"

    repositories {
        mavenCentral()
    }

    ext {
        jupiter = '5.9.0'
        lombok = '1.18.30'
        aeonbits = '1.0.12'
        assertjCore = '3.24.1'
        testcontainers = '1.20.4'
    }

    dependencies {
        implementation "org.testcontainers:selenium:$testcontainers"
        implementation "org.aeonbits.owner:owner:$aeonbits"
        implementation "org.testcontainers:junit-jupiter:$testcontainers"
        implementation "org.testcontainers:testcontainers:$testcontainers"
        implementation "org.junit.jupiter:junit-jupiter:$jupiter"


        testImplementation "org.assertj:assertj-core:$assertjCore"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$jupiter"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter"

        compileOnly "org.projectlombok:lombok:$lombok"
        annotationProcessor "org.projectlombok:lombok:$lombok"
    }

    tasks.withType(Test).configureEach {
        systemProperties = System.properties as Map<String, ?>
        systemProperty "file.encoding", "utf-8"
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        reports.junitXml.outputPerTestCase = true

        doLast {
            deleteDaemonLogs
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test) {
        systemProperty 'java.library.path', ''
    }

    task deleteDaemonLogs {
        def gradle = project.getGradle()
        new File("${gradle.getGradleUserHomeDir().getAbsolutePath()}/daemon/${gradle.getGradleVersion()}").listFiles().each {
            if (it.getName().endsWith('.out.log')) {
                logger.warn("Cleaning up daemon log file $it")
                it.delete()
            }
        }
    }

}