buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:6.2.2'
    }
}

subprojects {
    apply plugin: 'org.owasp.dependencycheck'
}

allprojects {

    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'java'

    defaultTasks 'clean', 'test'
    group 'com.vdp.pulse'
    version '1.0-SNAPSHOT'
    sourceCompatibility = 1.11
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = "UTF-8"

    repositories {
        mavenCentral()
    }


    ext {
        jupiter = '5.9.0'
        slf4j = '2.0.5'
        lombok = '1.18.24'
        aeonbits = '1.0.12'
        commonsio = '2.11.0'
        selenide = '5.25.0'
        assertjCore = '3.24.1'
        awaitility = '4.2.0'
        jdbi = '3.35.0'
        mssqlJdbc = '11.2.2.jre11'
        postgresql = '42.5.1'
        mssqlAuth = '11.2.2.x86'
        msal4j = '1.11.0'
        testcontainers = '1.16.2'
        azureStorage = '8.6.6'
        restassured = '4.4.0'
        jaxbapi = '2.3.1'
        azureIdentity = '1.7.0'
        skyscreamer = '1.5.1'
        jsonValidator = '5.4.0'
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
        implementation 'com.theokanning.openai-gpt3-java:client:0.8.1'
        implementation 'com.theokanning.openai-gpt3-java:api:0.8.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
        compileOnly 'org.projectlombok:lombok:1.18.26'
        annotationProcessor 'org.projectlombok:lombok:1.18.26'

        implementation "org.aeonbits.owner:owner:$aeonbits"
        implementation "org.testcontainers:junit-jupiter:$testcontainers"
        implementation "org.testcontainers:testcontainers:$testcontainers"
        implementation "org.junit.jupiter:junit-jupiter:$jupiter"
        implementation "io.rest-assured:rest-assured:$restassured"
        implementation "javax.xml.bind:jaxb-api:$jaxbapi"
        implementation "io.rest-assured:json-schema-validator:$jsonValidator"

        testImplementation "org.assertj:assertj-core:$assertjCore"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$jupiter"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter"

        compileOnly "org.projectlombok:lombok:$lombok"
        annotationProcessor "org.projectlombok:lombok:$lombok"
        testCompileOnly "org.projectlombok:lombok:$lombok"
        testAnnotationProcessor "org.projectlombok:lombok:$lombok"
        testCompileOnly 'org.projectlombok:lombok:1.18.26'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
    }

    tasks.withType(Test).configureEach {
        doFirst {
            deleteDaemonLogs
        }

        systemProperties = System.properties as Map<String, ?>
        systemProperty "file.encoding", "utf-8"
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        reports.junitXml.outputPerTestCase = true

        doLast {
            deleteDaemonLogs
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    task deleteDaemonLogs {
        def gradle = project.getGradle()
        new File("${gradle.getGradleUserHomeDir().getAbsolutePath()}/daemon/${gradle.getGradleVersion()}").listFiles().each {
            if (it.getName().endsWith('.out.log')) {
                logger.warn("Cleaning up daemon log file $it")
                it.delete()
            }
        }
    }

}